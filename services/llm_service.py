from typing import Any, List, Callable, Dict, Annotated
from dataclasses import dataclass
from langchain_core.messages import HumanMessage
from langchain.schema import SystemMessage
from services.promt import promt
from langgraph.graph import END, START, StateGraph, add_messages
from langchain_openai import ChatOpenAI
from server.send_message import send_text_message
from config.config import Config
from services.tools_func import Tools
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import ToolNode, tools_condition


@dataclass
class State:
    messages: Annotated[List[Any], add_messages]


class MainLlmService:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM –∏ –≥—Ä–∞—Ñ–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    memory: MemorySaver = MemorySaver()
    react_graph: Any = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤

    def __init__(self, message_text: str, chat_id: str, lead_id: str) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        :param message_text: –¢–µ–∫—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
        :param lead_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ª–∏–¥–∞.
        """
        self.llm = ChatOpenAI(
            model="gpt-4o",
            api_key=Config.OPENAI_API_KEY,
            temperature=0.2
        )
        self.sys_msg = SystemMessage(content=promt)
        self.message_text = message_text
        self.lead_id = lead_id
        self.chat_id = chat_id
        self.tools_instance = Tools(lead_id, chat_id)
        self.tools: List[Callable] = self._initialize_tools()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω
        if MainLlmService.react_graph is None:
            self._create_graph()

    def _initialize_tools(self) -> List[Callable]:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LLM.
        """
        return [
            self.tools_instance.get_company_name,
            self.tools_instance.get_name,
            self.tools_instance.get_number,
            self.tools_instance.get_email,
            self.tools_instance.get_address,
            self.tools_instance.get_work_position,
            self.tools_instance.get_region,
            self.tools_instance.get_machine,
            self.tools_instance.get_type_client,
            self.tools_instance.get_current_time,
            self.tools_instance.send_transport_file,
            self.tools_instance.change_client_stage,
        ]

    async def query_or_respond(self, state: State) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LLM —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        :param state: –û–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
        :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏—Ä—É—é—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
        """
        llm_with_tools = self.llm.bind_tools(self.tools, parallel_tool_calls=True)
        response = await llm_with_tools.ainvoke([self.sys_msg] + state.messages)
        return {"messages": [response]}

    def _create_graph(self) -> None:
        """
        –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        print("üöÄ –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ...")

        builder = StateGraph(State)
        builder.add_node("query_or_respond", self.query_or_respond)
        builder.add_node("tools", ToolNode(self.tools))
        builder.add_edge(START, "query_or_respond")
        builder.add_conditional_edges("query_or_respond", tools_condition)
        builder.add_edge("tools", "query_or_respond")
        builder.add_edge("query_or_respond", END)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –≤ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        MainLlmService.react_graph = builder.compile(checkpointer=self.memory)

    async def handle_user_message(self) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç.
        :return: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
        """
        config: Dict[str, Any] = {"configurable": {"thread_id": self.chat_id}}
        result = await MainLlmService.react_graph.ainvoke(
            {"messages": [HumanMessage(content=self.message_text)]}, config=config
        )


        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        response_text = result["messages"][-1].content
        await send_text_message(response_text, self.chat_id)
        return response_text
